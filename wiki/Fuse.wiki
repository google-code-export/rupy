#summary How to fuse async realtime HTTP proxy chains for µSOA.
#labels Featured,Phase-Design,Phase-Implementation

This requires latest [http://rupy.se/rupy.zip rupy].

This [http://test.rupy.se/fuse example] fuses data asynchronously from multiple sources (of which one is a never ending realtime chunked stream) to your browser via a rupy instance on a raspberry pi with zero thread IO-wait and low memory footprint. You can view the [http://monitor.rupy.se monitor] to see CPU usage (blue is IO-wait).

Time and <font color="red">*IO-wait*</font> is shown in the graph below:

  # Server & client sync.
  # Client async.
  # Fused server & client async.

http://rupy.se/fuse.gif

If you wan't to use [https://code.google.com/p/rupy/wiki/Process µSOA] this is the most performant way to build your services network. You can even use this as a load balancer.

{{{
public class Fuse extends Service {
	public String path() { return "/fuse"; }
	public void filter(final Event event) throws Event, Exception {
		if(event.push()) {
			Output out = event.output();
			HttpResponse one = (HttpResponse) event.query().get("one");
			if(one != null) {
				Deploy.pipe(one.getEntity().getContent(), out);
				event.query().put("one", null);
			}
			String two = (String) event.query().get("two");
			if(two != null) {
				out.println(two);
				event.query().put("two", null);
			}
			out.flush();
		}
		else {
			HttpGet one = new HttpGet("http://strip.rupy.se/?a=martin+kellerman&body");
			HttpGet two = new HttpGet("http://bank.rupy.se/pull?mail=" + System.currentTimeMillis());
			final CloseableHttpAsyncClient client = HttpAsyncClients.createMinimal();
			client.start();
			client.execute(one, new FutureCallback<HttpResponse>() {
				public void completed(final HttpResponse response) {
					event.query().put("one", response);
					event.reply().wakeup();
				}
				public void failed(final Exception e) {}
				public void cancelled() {}
			});
			client.execute(HttpAsyncMethods.create(two), new AsyncCharConsumer<HttpResponse>() {
				HttpResponse response;
				protected void onResponseReceived(final HttpResponse response) { this.response = response; }
				protected HttpResponse buildResult(final HttpContext context) { return this.response; }
				protected void onCharReceived(final CharBuffer buf, final IOControl ioctrl) throws IOException {
					event.query().put("two", buf.toString());
					if(event.reply().wakeup() != Reply.OK) {
						ioctrl.shutdown();
					}
				}
				protected void releaseResources() {}
			}, null);
		}
	}
}
}}}