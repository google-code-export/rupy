#summary How to build great "server" software.
#labels Phase-Requirements,Phase-Design,Phase-Implementation,Phase-Deploy,Phase-Support

=== 1. Guide===

  # *Agile*: You need to be able to hot-deploy because you'll want to work with others remotely*^1^* at high iteration speeds.
  # *Architecture*: The developer is completely free to choose any software (languages and tools etc.) of the service.
  # *Turnaround*: Maximum build & deploy time is how long it takes for you to switch to the test client. (1-2 seconds)
  # *Ownership*: The developer owns and is responsible for the service everywhere at all times.
  # *Errors*: Should be pushed from each live client to the service developers mobile phone in realtime.
  # *SOA*: One developer per service. HTTP is the only interface.
  # *TDD*: Test only what makes development slip due to complexity.

=== 2. Manage===

  # 1 minute per person (producer, consumer and developer) remote*^1^* morning meetings, no other scheduled meetings.
  # No documentation, less configuration, more code!

=== 3. Simple===

  # Don't use libraries/tools that you can avoid.
  # Be pragmatic, new is not always better.
  # If persistence can be a file, make it a file!
  # If you need indexing, use the file system.
  # If you need complex relations, use a database!
  # If you need full text indexing, use [http://www.google.com/enterprise/search/products/gsa.html google].

Either own your libraries/tools completely or don't at all*^2^*.

=== 4. REST-less===

  # {{{POST --> 302 --> GET}}} works, don't use {{{PUT}}} or {{{DELETE}}}.
  # Stateless is not required if you have proper load balancing.
  # Don't use the path for anything dynamic, it wastes CPU.
  # {{{JSON > XML}}} but {{{HTML > JSON}}}.

=== 5. Develop===

  # Make each module describe it's own use: if you browse to [http://sprout.rupy.se/login /login] the response should allow you to login! ([https://code.google.com/p/sprout/source/browse/trunk/src/se/rupy/sprout/Node.java model], [https://code.google.com/p/sprout/source/browse/trunk/res/jar/login.html view] and [https://code.google.com/p/sprout/source/browse/trunk/src/se/rupy/sprout/User.java#207 controller])
  # Use XSS for modularity, one domain name per service.

=== 6. Host===

  # If it makes economical sense to use Akamai your tools are bad.
  # DNS Roundrobin across backbones allows for 100% uptime. But this requires a new kind of real-time distributed [https://code.google.com/p/rupy/wiki/Persistence persistence].
  # Use dynamic "async non-blocking selector driven HTTP" server [https://code.google.com/p/rupy/wiki/AsyncResponse response] AND client _requests_ to load balance your services.
*TODO*: Build new concurrent HTTP client tool.

*^1^* Offices are stupid<br>
*^2^* "There's a service for that"