#summary How to build server software better.
#labels Phase-Requirements,Phase-Design,Phase-Implementation,Phase-Deploy,Phase-Support

=== 1. Guide===

  # *SOA*: _One developer per service._ HTTP is the only interface.
  # *Agile*: You need to be able to hot-deploy everywhere because you'll want to work with others remotely at high iteration speeds.
  # *Architecture*: The developer is completely free to choose any software (languages, tools, persistence etc.) of the service.
  # *Turnaround*: Maximum build & deploy time on _live_ is how long it takes for you to switch to the test client. (1-2 seconds)
  # *Ownership*: The developer owns and is responsible for the service everywhere at all times.
  # *Errors*: Should be pushed from each live client to the service developers mobile phone in realtime.
  # *TDD*: Test only what makes development slip due to complexity.

=== 2. Manage===

  # The data -producer, -consumer and developer trio have 1 minute per person remote*^1^* daily yester/morrow meetings.
  # No other mandatory scheduled meetings.
  # No documentation. _Automatic_ [http://sprout.rupy.se/api API]!
  # Open web, don't hide your data!

=== 3. Store===

  # If persistence can be a file, make it a file.
  # If you need:
    # Simple index; use the file system.
    # Many-to-many relations; use a database.
    # Full text search; use "[http://lucene.apache.org/core/ lucene]" or [http://www.google.com/enterprise/search/products/gsa.html google].

=== 4. REST-less===

  # {{{POST -> 302 -> GET}}} works, don't use {{{PUT}}} or {{{DELETE}}}.
  # Stateless is not required if you have proper load balancing.
  # Don't use the path for anything dynamic, it wastes CPU.
  # {{{JSON > XML}}} but {{{HTML+CSS+JS > JSON}}}.

=== 5. Develop===

  # Each module describes it's own use: f.ex. if you browse to [http://sprout.rupy.se/login /login] you should be able to login! ([http://rupy.se/sprout/se/rupy/sprout/Node.html model], [https://code.google.com/p/sprout/source/browse/trunk/res/jar/login.html view] and [https://code.google.com/p/sprout/source/browse/trunk/src/se/rupy/sprout/User.java#207 controller])
  # Use async for:
    # Server [https://code.google.com/p/rupy/wiki/AsyncResponse response]; if you have high iowait.
    # Proxy client requests; if you concurrently build the response to reduce latency.
  # Use XSS for modularity.

=== 6. Host===

  # Increase socket memory if you [https://code.google.com/p/rupy/wiki/ServeLargeFiles serve large files].
  # One subdomain per service. One service per instance. Port 80 only.
  # If it makes economical sense to use Akamai your software is probably bad.
  # DNS Roundrobin across backbones allows for 100% uptime. But this requires a new kind of real-time distributed [https://code.google.com/p/rupy/wiki/Persistence persistence].

*TODO*: Build new concurrent HTTP client tool to solve ยง5.2.2 with selector.

*^1^* [https://www.youtube.com/watch?v=5XD2kNopsUs Jason Fried]<br>