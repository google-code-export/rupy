#summary How to build server software better.
#labels Phase-Requirements,Phase-Design,Phase-Implementation,Phase-Deploy,Phase-Support

=== 1. Guide===

  # *ÂµSOA^1^*: _One developer per microservice._ HTTP is the only interface between _everything_.
  # *Agile*: You need to be able to hot-deploy _everywhere_ because you'll want to work with others remotely at high iteration speeds.
  # *Architecture*: The developer is completely free to choose any software (languages, tools, persistence etc.) of the service.
  # *Turnaround*: Maximum build & deploy time on _live_ is how long it takes for you to switch to the test client. (1-2 seconds)
  # *Ownership*: The developer owns and is responsible for the service _everywhere_ at all times.
  # *Errors*: Should be pushed from each live client to the service developers mobile phone in realtime.
  # *TDD*: Test only what makes development slip due to complexity.

=== 2. Manage===

  # The data -producer, -consumer and developer trio have 1 minute per person remote*^2^* daily yester/morrow meetings.
  # No other mandatory scheduled meetings.
  # You should be able to work from home.
  # If you finish quicker than expected, you own that remaining time.
  # No documentation. _Automatic_ [http://sprout.rupy.se/api API].

=== 3. Store===

  # If [https://code.google.com/p/rupy/wiki/Persistence persistence] can be a file, make it a file.
  # If you need:
    # Index; use the file system.
    # Relations; use a graph.
    # Full text search; combine the [http://root.rupy.se/node/data/text/full%20text%20search two]?
  # Your networked persistence should use HTTP.

=== 4. Develop===

  # Each module describes it's own use: f.ex. if you browse to [http://sprout.rupy.se/login /login] you should be able to login! ([http://rupy.se/sprout/se/rupy/sprout/Node.html model], [https://code.google.com/p/sprout/source/browse/trunk/res/jar/login.html view] and [https://code.google.com/p/sprout/source/browse/trunk/src/se/rupy/sprout/User.java#207 controller])
  # Use async for:
    # Server [https://code.google.com/p/rupy/wiki/AsyncResponse response]; if you have high iowait or realtime services.
    # Client [https://code.google.com/p/rupy/source/browse/trunk/src/se/rupy/http/Async.java requests]; if you can concurrently build the response to reduce latency.
    # For top performance and speed [https://code.google.com/p/rupy/wiki/Fuse FUSE] both.
  # Use the same keyboard and OS everywhere.
  # Use JavaScript injection for modularity, over; chunked response, CO-XHR or even XSS (careful with the cookies though).


=== 5. Host===

  # Minimum two subdomains per service (f.ex. dev.`<`name`>`.host.com and `<`name`>`.host.com):
    # On same server provider.
    # Port 80 only.
  # Increase socket memory if you [https://code.google.com/p/rupy/wiki/ServeLargeFiles serve large files].
  # If it makes economical sense to use Akamai your software is probably bad.
  # DNS Roundrobin across backbones allows for 100% uptime. But this requires a new kind of real-time distributed [https://code.google.com/p/rupy/wiki/Persistence persistence].
  # Install, configure, [http://monitor.rupy.se monitor] and notify yourself; even the hardcore [http://one.rupy.se/panel stuff].

*^1^* [http://martinfowler.com/articles/microservices.html Microservices]<br>
*^2^* [https://www.youtube.com/watch?v=5XD2kNopsUs Jason Fried], [https://weworkremotely.com We Work Remotely]<br>