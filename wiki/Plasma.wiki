#summary How to build completely async proxy chains.
#labels Featured,Phase-Design,Phase-Implementation

This [http://test.rupy.se/plasma example] proxies data all the way from the apache homepage to your browser via a rupy instance with zero thread iowait and memory footprint. If you wan't to use microservices this is the most performant way to build your network.

{{{
public static class Plasma extends Service {
	public String path() { return "/plasma"; }
	public void filter(Event event) throws Event, Exception {
		Output out = event.output();

		if(event.push()) {
			HttpResponse response = (HttpResponse) event.query().get("response");
			Deploy.pipe(response.getEntity().getContent(), out);
			event.output().finish();
			out.flush();
		}
		else {
			event.hold();

			CloseableHttpAsyncClient client = HttpAsyncClients.createMinimal();
			client.start();

			HttpGet request = new HttpGet("http://www.apache.org/");
			EventFutureCallback callback new EventFutureCallback<HttpResponse>(event)
			Future<HttpResponse> future = client.execute(request, callback);

			out.println("Async response started!");
			out.flush();
		}
	}

	public static class EventFutureCallback<T> implements FutureCallback {
		Event event;
		public EventFutureCallback(Event event) {
			this.event = event;
		}
		public void completed(Object result) {
			HttpResponse response = (HttpResponse) result;
				
			event.query().put("response", response);
			event.reply().wakeup();
		}
		public void failed(final Exception e) {
			System.out.println("Failed " + e);
		}
		public void cancelled() {
			System.out.println("Cancelled");
		}
	}
}
}}}