#summary How to deploy a MySQL connection pool on host.rupy.se
#labels Phase-Implementation

<font color="red">_*The new cluster key/value store is done.*_</font>

For true redundancy you need to use some custom cluster database, mysql with replication is not good enough. Since we now have hosting across multiple colocations!

We use Dropbox for our key/value store, simply writing files with encrypted JSON content. Follow the tutorial to set it up for your application: [https://www.dropbox.com/developers/core/start/java]

In the meantime you should register on the node you want your mysql database on: [http://one.rupy.se one] or [http://two.rupy.se two] hosted by FSData in Sweden and [http://tre.rupy.se tre] hosted by PCExtreme in the Netherlands.

Important: This is not secure, use Dropbox persistence instead. MySQL connections between the two colocations are not encrypted. Alternatively, if you trust FSData only use one and two nodes.

Using [http://memory.googlecode.com memory] (you need to add memory.jar and util.jar to your classpath) ORM:

{{{
public class DataBase extends Service {
	public static Base BASE;
	public static Pool POOL;
	public static SQL SQL;

	public String path() { return "/somepath"; }

	public void create(Daemon daemon) {
                try {
                        SQL = new SQL(daemon);
                        POOL = new Pool(SQL, SQL);
                        BASE = new Base();
                        BASE.init(POOL);
                }
                catch(Exception e) {
                        e.printStackTrace();
                }
	}

	public void destroy() {
		POOL.close();
	}

	public void filter(Event event) throws Exception, Event {}

	public static class SQL implements Log, Settings {
		public String host, pass, ip;
		
		public SQL(Daemon daemon) throws Exception {
			JSONObject account = new JSONObject((String) daemon.send("{\"type\": \"account\"}"));
			host = account.getString("host");
			pass = account.getString("pass");
			ip = account.getString("ip");
		}

		public String driver() {
			return "com.mysql.jdbc.Driver";
		}

		public String url() {
			return "jdbc:mysql://" + ip + "/" + host.replaceAll("\\.", "_");
		}

		public String user() {
			return pass;
		}

		public String pass() {
			return pass;
		}

		public void message(Object o) {}
	}
}
}}}