#summary How to stream chunks in real-time.
#labels Featured,Phase-Implementation

You can now [http://rupy.googlecode.com/files/talk-1.0.zip stream] messages over HTTP with rupy.

The message performance of the above test implementation:<br>
           
||CPU (s)||usage||in/s||out/s||total/s||
||3770S (4)||0%||~4.000||~9.000||~13.000||
||D510MO (2)||80-120%||~3.000||~6.000||~9.000||
||RPi (1)||99%||~300||~700||~1.000||

You can try it quickly by right-clicking these two links and opening <br>
them in new windows (so you can see the stream in real-time):

  | [http://host.rupy.se/pull?name=one one] | < "hello" | [http://host.rupy.se/push?name=two&message=hello two] |

  You will then send "hello" from <i>two</i> to <i>one</i>. <br>
  Reloading <i>two</i> will resend the message.<br>
  You can play around with more windows <br>
  and <i>name=[http://host.rupy.se/pull?name=three three]&message=[http://host.rupy.se/push?name=two&message=hi hi]</i> values.

  If it doesn't work, try later, somebody else <br>
  might be trying it at the same time.

  IE doesen't render until a certain amount is <br>
  received, so hold down F5 in <i>two</i> for a while.

This code allows you to receive dynamic chunks with flash:

{{{
package {
    import flash.errors.*;
    import flash.events.*;
    import flash.net.URLRequest;
    import flash.net.URLStream;
    import flash.display.MovieClip;

    public class Comet extends flash.display.MovieClip {
        private var stream:URLStream;
        private var offset:int = 0;

        public function Comet() {
            stream = new URLStream();
            var request:URLRequest = new URLRequest("http://host.rupy.se/pull?name=one");
            stream.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            try {
                stream.load(request);
            } catch (error:Error) {
                trace("Unable to load requested URL.");
            }
        }

        private function progressHandler(event:Event):void {
            var progress:ProgressEvent = ProgressEvent(event);
            var message:String = stream.readUTFBytes(progress.bytesLoaded - offset);
            offset = progress.bytesLoaded;
            trace(message);
        }
    }
}
}}}

As [http://www.ietf.org/id/draft-talk-comet-stream-protocol-00.txt RFC] specification I supply a reference implementation.