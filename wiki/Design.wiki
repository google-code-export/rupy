#summary How it works.

*Thread Model*

Rupy has one selector thread that feeds many worker threads. This model is simple to understand, but hard to synchronize; fortunately that's been done for you!

*Delay Variable*

The events have a network timeout variable called _delay_ which is 5 seconds by default. This can be increased (add '-delay `<`milliseconds`>`' to startup script) if you will download and/or upload large files from/to the server.

The way this works is that if the event socket IO stalls during an ongoing request / response the server timeouts and frees the worker from this event.

Since 0.4.1 delay is also a cleanup duration for dead TCP layer sockets. Which means that if a worker thread is idle with an event for more than delay then the event is disregarded and the socket canceled.

*API*

The API is designed to be as small as possible, and therefore you have to handle the asynchronous events being recycled. While other Comet API's provide you with special methods for asynchronous callbacks, we rely on the Event.push() method to tell us wether an event is "real" or "recycled".

*Code*

The hierarchy of the code is as follows:

{{{

Event -+- Query --- Input
       |
       +- Reply --- Output

}}}
