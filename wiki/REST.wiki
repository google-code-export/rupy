#summary Why yet another Java HTTP server?
#labels Phase-Design

_"Size matters, and less is more!"_

*Modularity* 

 Ideally, you should be able to choose your tools and you should also be able to replace a broken tool with a new working one quickly. That's what modular software is all about, like binary lego. If you need a JSP compiler, _choose_ a JSP compiler!

*Handcraft*

 Or why not build your own JSP compiler? Actually why not precompile instead, infact we just built one, it's [http://rupy.googlecode.com/files/page-0.1.zip 4KB]! During all times craftsmen have built their own tools. We strongly recommend that you be creative about how to solve _your_ technical challenges without the use of multi-purpose high-level tools.

*Agility*

 With rupy you can hot-replace a major refactoring, if you serialize your user data to the session, without _any_ kind of interruption for your end users and _directly_ from your development station to the live environment. Let your users do the QA!

*Speed and Scalability*

 Why not have both, the compact codebase inherently provides high speed, which still gracefully degrades thanks to non-blocking asynchronous IO and an event queue to avoid selector trashing.

*Design*

 At the end of 2003, Greg Wilkins, the author of the Jetty Web container and contributor to the Servlet specifications, blogged about some issues with Servlets: 

  * No clear separation between the protocol concerns and the application concerns. 
  * Unable to take full advantage of the non-blocking NIO due to blocking IO assumptions. 
  * Full Servlet Web containers are overkill for many applications. 

 Source: http://www.restlet.org/about/introduction