#summary How to integrate with GWT.

*Decode, invoke and encode*

Add this inner class below to GreetingServiceImpl.java in the generated GWT start app and replace the REPLACE string in both places with the name of your project/jar (might not be the same in both places). Then add gwt-user.jar to the classpath, deploy the war file as a jar to rupy and everything will just magically work.

NOTE: You should still develop using devmode because the compiler takes 30 sec. to compile the smallest app.

{{{

import java.io.*;
import java.lang.reflect.*;
import se.rupy.http.*;
import com.google.gwt.user.server.rpc.*;
import com.google.gwt.user.client.rpc.*;

public static class Bridge extends Service {
	public String path() { return "/REPLACE/greet"; }
	public void filter(Event event) throws Event, Exception {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		Deploy.pipe(event.input(), out);
		String req = out.toString();

		Thread.currentThread().setContextClassLoader(event.daemon().archive("REPLACE"));
		RPCRequest rpc = RPC.decodeRequest(req, GreetingService.class);		  

		String res = null; // RPC.invokeAndEncodeResponse(new GreetingServiceImpl(), rpc.getMethod(), rpc.getParameters());

		try {
			res = RPC.encodeResponseForSuccess(rpc.getMethod(), rpc.getMethod().invoke(new GreetingServiceImpl(), rpc.getParameters()));
		}
		catch(InvocationTargetException e) {
			res = RPC.encodeResponseForFailure(rpc.getMethod(), new SerializableException(e.getCause().getMessage()));
		}

		event.output().print(res);
	}
}
}}}

Also add this to the build.xml:

{{{
<path id="project.class.path">
    ...
	<pathelement location="lib/http.jar"/>
</path>
}}}