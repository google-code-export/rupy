#summary How to integrate with GWT.

*Decode, invoke and encode*

Add this inner class below to GreetingServiceImpl in the generated GWT start app and replace the REPLACE string in the two places in the code below with the name of your project/jar. Then deploy the war file as a jar to rupy, and everything will just magically work.

You should develop using devmode because the compiler takes 30 sek to compile the GWT start app which is just plain wrong.

I would NEVER use GWT if it wasn't a requirement. Because sending HTML to the browser and innerHTML:ing it is easy to do if you know a little javascript.

Also if you look at the contents of the _req_ and _res_ variables below you will see that google uses some proprietary encoding and I'm just at a loss why they don't use JSON!

Let's keep on overengineering! ;)

{{{
public static class Bridge extends Service {
	public String path() { return "/REPLACE/greet"; }
	public void filter(Event event) throws Event, Exception {
		// Set classloader.
		Thread.currentThread().setContextClassLoader(event.daemon().archive("REPLACE"));

		// Read.
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		Deploy.pipe(event.input(), out);
		String req = out.toString();

		// Decode, invoke and encode.
		RPCRequest rpc = RPC.decodeRequest(req, GreetingService.class);		  
		String res = RPC.invokeAndEncodeResponse(new GreetingServiceImpl(), rpc.getMethod(), rpc.getParameters());

		event.output().print(res); // Write.
	}
}
}}}