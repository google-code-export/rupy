#summary Secure Unique Identity Cluster.
#labels Phase-Design,Phase-Implementation

This requires latest [http://rupy.se/rupy.zip rupy] in hosted mode.

For true redundancy you need to use some custom cluster database since we [http://host.rupy.se host] across multiple colocations!
Ordinary databases are not secure or redundant in a distributed cluster environment out of the box, but most of all:

  _Database clients don't use async HTTP; you can't scale them easily._

On the other hand modern file systems are now cheap and fast (ext4 on PCIe SSD) and async is becoming common place; See the entry on [https://code.google.com/p/rupy/wiki/Fuse fuse] to learn more on how you can scale any [https://code.google.com/p/rupy/wiki/Process ÂµSOA] cluster with async HTTP.

Root takes a little bit from all NoSQL databases: document, key-value and graph; It's basically a key-value store (Base58-JSON) with indexing (that we call sort) on custom fields (including full text search) in the JSON and graph relationships between the key-values.

The JSON objects and indexes are stored as a plain file (symbolic hard link). The relations and full text search are just binary files with lists of longs (the hashed Base58 key). Simple, powerful and in line with both _Moore's_ and _Murphy's_ laws.

<font color="red">_Try the current version:</font> [http://root.rupy.se root.rupy.se]_

TODO:

  # ~~new [https://code.google.com/p/rupy/source/browse/trunk/src/se/rupy/http/Async.java async] client~~
  # ~~_edit node_~~<sup>1</sup>
  # ~~_sort node_ text index~~<sup>1</sup>
  # ~~_link node_ relation graph~~<sup>1</sup>
  # ~~_find node_ full text search~~<sup>2</sup>
  # _list path sort_ folders
  # pagination size in _link list_ and _path sort_ folder
  # _trim node_ & _link_

WISH:

  # link _node_ many-to-many-to-many... relations
  # sort _node_ integer index<sup>3</sup>
  # replicate any file<sup>4</sup>

Source: [http://root.rupy.se/code?path=/User.java User.java], [http://root.rupy.se/code?path=/Root.java Root.java], [http://root.rupy.se/code Async.java]

<sup>1</sup> The root cluster database will not re-synchronize data for you after a failed operation (node down), you will have to do that manually. It will however perfectly replicate and make sure nothing gets linked twice when all nodes are up. It's write sensitive, but read strong.<br>
<sup>2</sup> Only searches full words.<br>
<sup>3</sup> In memory index is how you would solve this now.<br>
<sup>4</sup> Images would be nice!