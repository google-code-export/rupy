#summary Secure Unique Identity Cluster.
#labels Phase-Design,Phase-Implementation

This requires latest [http://rupy.se/rupy.zip rupy] in hosted mode.

For true redundancy you need to use some custom cluster datastore since we [http://host.rupy.se host] across multiple colocations!
Ordinary databases are not secure or redundant in a distributed cluster environment, but most of all:

  * Databases don't have NIO; you can't scale them.

On the other hand modern file systems are now B-Tree indexed and capable of scaling.
My first implementation of this "database" will be a solution to the never ending user registration/login duplication.

TODO:

  # ~~[https://code.google.com/p/rupy/wiki/Fuse async]~~
  # ~~key hard link index~~
  # ~~create~~ [http://root.rupy.se/api api]
  # sync normal files
  # add hard link indexes
  # build soft link relations
  # date & zone index?
  # refactor `<`id`>` file:

{{{
{
	"key": "as4df5gh6jk7zx4c",
	"name": "xxxxx", //matches [a-z.]
	"mail": "yyy@zzz.com",
	"pass": "xyz", // SHA
	"date": 123456789
	"zone": -6
}
}}}

<font color="red">
_Work in progress:<br><br>This current version is redundant for reads, but not for writes, meaning for example:<br>If part of the cluster is down; you will still be able to login, but registrations will fail.<br>The tradeoffs for write uptime are under consideration._

[http://rupy.se/Root.java Root.java]