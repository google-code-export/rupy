#summary Secure Unique Identity Cluster.
#labels Phase-Design,Phase-Implementation

This requires latest [http://rupy.se/rupy.zip rupy] in hosted mode and [http://root.rupy.se/code Async.java].

For true redundancy you need to use some custom cluster datastore since we [http://host.rupy.se host] across multiple colocations!
Ordinary databases are not secure or redundant in a distributed cluster environment out of the box, but most of all:

  _Database interfaces don't use async HTTP; you can't scale them easily._

On the other hand modern file systems are now cheap and fast (ext4 on PCIe SSD).
My first implementation of this distributed file index will be a solution to user management with simple _node_ value index and complex _link_ relations.

<font color="red">
_Work in progress: This current version is redundant for reads, but not for writes, meaning for example: If part of the cluster is down; you will still be able to login, but registrations will fail. The tradeoffs for write uptime are under consideration._
</font>

Try the current state: [http://root.rupy.se root.rupy.se].

TODO:

  # ~~key hard link index~~
  # ~~new [http://root.rupy.se/code async] client~~
  # hard _node_ index
  # soft _link_ relation
  # private & public access?
  # date & zone index?
  # sync any file?
  # refactor `<`id`>` file:

{{{
{
	"key": "riA4Ky7Ha6JFnGya",
	"name": "xxxxx", // matches [a-z.]
	"mail": "yyy@zzz.com",
	"pass": "xyz", // SHA
	"date": 123456789
	"zone": -6
}
}}}

Source: [http://root.rupy.se/code Async.java]