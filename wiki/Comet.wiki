#summary HTTP reply in real-time.
#labels Phase-Implementation
If you want the HTTP server to send updates to the client you can use polling, where the client asks the server for updates at regular intervalls. But since this doesen't provide any real-time functionality, not to mention the performance overhead, modern HTTP bound applications use asynchronous reply instead.

The HTTP server only replies to the clients query when there is some new information to send. Your client basically 'hangs' in the meantime, so you will need to thread the client. Some even setup two HTTP connections; one for outgoing data, one for incoming, and use chunked transfer encoding to stream data between client and server over HTTP just as if it was a normal TCP stream connection.

Firewalls and proxies sometimes interrupt passive queries that linger for too long, so make sure your solution tears down and recreates the comet queries at regular intervalls.

This is how you wakeup rupy so that it will assign a worker thread to write your reply asynchronously:
{{{
import se.rupy.http.*;
public Comet implements Service {
	boolean sendUpdate;
	Event cache;
	...
	public void filter(Event event) throws Event, IOException {
		if(saveEventForLater) {
			// you need to somehow cache the event
			// it's important to NOT call event.output()
			cache = event;
		}
		else if(caughtUpdate) {
			// when you for example received a chat 
			// message destined to the cached client
			sendUpdate = true;
			cache.reply().wakeup();
		}
		else if(sendUpdate && event.index() == cache.index()) {
			Output out = event.reply().output();
			... // write the message
			sendUpdate = false;
		}
	}
}
}}}
Also see [http://en.wikipedia.org/wiki/Comet_%28programming%29 comet]. 