#summary Real-time updates over HTTP.
#labels Phase-Implementation
See [http://en.wikipedia.org/wiki/Comet_%28programming%29 comet]. If you want the HTTP server to send updates to the client you can use polling, where the client asks the server for updates at regular intervalls. But since this doesen't provide a real-time functionality, not to mention the performance overhead and unscalability, modern HTTP bound applications use asynchronous reply instead.

That means that the HTTP server will only reply to the clients query when there is something to update. Your client basically 'hangs' in the meantime, so you will need to thread the client. Some even setup two HTTP connections, one for outgoing data and one for incoming, to use chunked transfer encoding to stream data between client and server over HTTP.

This is how you wakeup Rupy so that it will assign a worker thread to write your asynchronized reply:
{{{
	public Service implements se.rupy.http.Service {
		Event event;

		...

		public void filter(Event event) throws Event, IOException {
			this.event = event;
		}

		/* method called by another thread, 
		 * most likely another filter event thread
		 */
		public void comet() {
			Output out = event.reply().output();
			... // write your reply data ...
			event.reply().wakeup();
		}
	}
}}}