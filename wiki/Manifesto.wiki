#summary Why yet another Java HTTP server?

_"Size matters, and less is more!"_

*Modularity* 

 Ideally, you should be able to choose your tools and fix or replace a broken tool quickly. That's what modular software is all about, like binary lego. Dividing your appliction over many servers is a proven approach to scalability and provides a clear separation of the architectural interfaces.

_We are talking about vertical micro distribution here, where your application is a web of independent services that don't necessarily run on the same technology._

*Creativity and Simplicity*

 You want to serve active HTML? We figured that precompiling the Services before deployment would be simpler and faster than traditional server-side JSP compiling; so we built a [http://rupy.googlecode.com/files/page-0.2.zip JHTML] processor, which transforms a HTML page with plain Java in it, to a Service. Hope you like it!

 Simplicity is what JHTML, Comet, JSON and REST share alike. After all; JHTML is Java, HTTP is TCP, JSON is javascript and web-services are [http://wanderingbarque.com/nonintersecting/2006/11/15/the-s-stands-for-simple/ overengineered].

 Rupy is so simple you should be able to understand the codebase enough to comfortably modify it during a coffee-break. Superposing of desired features should be hesitationless.

_In general we recommend that you be creative about how to solve your technical challenges without the use of multi-purpose high-level tools. It really makes sense both because you will enjoy your work more when you create, because you actually learn something worthwhile; and in the process you can solve problems at their origin instead of working around them!_

*Creativity and Speed*

 Speed without scalability is worth nothing. Fortunately, rupy's compact codebase inherently provides high speed, which still gracefully degrades thanks to non-blocking asynchronous IO and an event queue to avoid selector trashing.

 But creativity without speed is a waste of time, because to [http://www.ted.com/index.php/talks/view/id/66 create] you need to experiment. The faster you get results, the faster your creativity becomes an original idea that has value!

_If you believe that "being prepared to be wrong" is an integral part of creativity; how can you be creative, if it takes five minues to find out if you where wrong every time you try something out? If you are an experimental developer like me, you will appreciate the compile-archive-deploy roundtrip of a couple of seconds. Also I find that my mind often strays away from the task at hand if it takes more than that. :d_

*Agility*

 With rupy you can hot-replace a major refactoring, if you serialize your session data (see [Deployment]), without _any_ kind of interruption for your end users and _directly_ from your development station to the live environment. Let your users do the QA!

*Design*

 At the end of 2003, Greg Wilkins, the author of the Jetty Web container and contributor to the Servlet specifications, blogged about some issues with Servlets: 

  * No clear separation between the protocol concerns and the application concerns. 
  * Unable to take full advantage of the non-blocking NIO due to blocking IO assumptions. 
  * Full Servlet Web containers are overkill for many applications. 

 Source: http://www.restlet.org/about/introduction