#summary Why yet another Java HTTP server?

*Creativity*

 With rupy I wanted to remove all obstacles and annoyances programmers experience when developing web applications with other Java HTTP servers. With rupy the compile-bundle-hotdeploy roundtrip is a couple of seconds which increases productivity and allows for a more creative "experimental" style of development.

*Modularity*

 Ideally, you should be able to choose your tools and fix or replace a broken tool quickly. That's what modular software is all about, like binary lego. Dividing your appliction over many servers is a proven approach to scalability and provides a clear separation of the architectural interfaces.

*Simplicity*

 Simplicity is what Comet, JSON and REST share alike. After all; HTTP is TCP, JSON is javascript and web-services are [http://wanderingbarque.com/nonintersecting/2006/11/15/the-s-stands-for-simple/ overengineered]. Rupy is so simple you should be able to understand the codebase enough to comfortably modify it during a coffee-break. Superposing of desired features should be hesitationless.

 _You want to serve active HTML? We figured that precompiling the Services before deployment would be simpler than traditional server-side JSP compiling; so we built a Java/HTML [http://rupy.googlecode.com/files/page-0.2.1.zip processor], which transforms a HTML page with plain Java in it, to a Java class that prints HTML._

*Speed*

 Scalability often slows things down. Fortunately, rupy's compact codebase inherently provides high speed, which still gracefully degrades thanks to non-blocking asynchronous IO and an event queue to avoid selector trashing.

 While uptime is a requirement, ideas can't grow without development speed; because to create you need to experiment and the faster you get results, the faster your ideas might have value!

*Agility*

 With rupy you can [Deployment hot-replace] a major refactoring, without _any_ kind of interruption for your end users and _directly_ from your development station to the dev or live environment. Let your users do the QA!

 Configuration by hot-deployment enables you to write all configurations directly in the java code instead of having the traditional XML configuration which often requires a reboot, is typo prone and always induces an extra learning step.

 _This is particularily useful if you have a dev environment against which you test some external integration, use a property that you initialize rupy with to separate the different environments from each other._

*Design*

 At the end of 2003, Greg Wilkins, the author of the Jetty Web container and contributor to the Servlet specifications, blogged about some issues with Servlets: 

  * No clear separation between the protocol concerns and the application concerns. 
  * Unable to take full advantage of the non-blocking NIO due to blocking IO assumptions. 
  * Full Servlet Web containers are overkill for many applications. 

 Source: http://www.restlet.org/about/introduction